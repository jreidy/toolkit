// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'util/util', 'model/user', 'model/loading', 'model/project_categories', 'view/navbar_view', 'view/loading_view', 'text!template/project.html', 'moment'], function(_, Backbone, Util, User, Loading, ProjectCategories, NavbarView, LoadingView, ProjectTemplate, moment) {
    var ProjectView;
    ProjectView = (function(_super) {

      __extends(ProjectView, _super);

      function ProjectView() {
        return ProjectView.__super__.constructor.apply(this, arguments);
      }

      ProjectView.prototype.el = "#project_view";

      ProjectView.prototype.template = _.template(ProjectTemplate);

      ProjectView.prototype.initialize = function(options) {
        var body, i, navbarView, _i, _j, _ref, _ref1, _results;
        _.bindAll(this);
        this.bindEvents();
        this._preRender();
        this.options = options;
        this.currentCategory = 0;
        this.projects = [];
        for (i = _i = 0, _ref = this.options.items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.projects[i] = new ProjectCategories([], {
            id: this.options.items[i].gd$resourceId.$t
          });
        }
        this.user = new User;
        this.user.on("change:userName", this.userDataReady);
        body = document.getElementById("body");
        body.className = "1";
        navbarView = new NavbarView({
          model: this.user
        });
        this.currentIndex = 0;
        this.projectTitle = this.options.items[0].title.$t;
        _results = [];
        for (i = _j = 0, _ref1 = this.projects.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          _results.push(this.projects[i].on("reset", this.spreadSheetReady));
        }
        return _results;
      };

      ProjectView.prototype.bindEvents = function() {
        var eventName, events, i, _i;
        this.$el.undelegate(".sub_category");
        events = {};
        eventName = 'createTouch' in document ? 'tap' : 'click';
        for (i = _i = 0; _i < 3; i = ++_i) {
          events["" + eventName + " .category" + i] = "tabSelected";
        }
        events["" + eventName + " .next_week"] = "nextWeekSelected";
        events["" + eventName + " .previous_week"] = "previousWeekSelected";
        return this.delegateEvents(events);
      };

      ProjectView.prototype._preRender = function() {
        this.loadingView = new LoadingView({
          model: new Loading({
            "message": "rendering Project page"
          })
        });
        return this.loadingView.render();
      };

      ProjectView.prototype.userDataReady = function() {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.projects.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.projects[i].access_token = this.user.getAccessToken();
          _results.push(this.fetchProject(i));
        }
        return _results;
      };

      ProjectView.prototype.fetchProject = function(index) {
        return this.projects[index].fetch({
          dataType: "jsonp"
        });
      };

      ProjectView.prototype.spreadSheetReady = function() {
        this.loadingView.empty();
        return this.render();
      };

      ProjectView.prototype._getWeeksFromNow = function() {
        var i, weeks, _i;
        weeks = [];
        for (i = _i = 0; _i <= 7; i = ++_i) {
          weeks[i] = {
            name: moment().day(1 + i * 7).format("MM/DD/YY"),
            landscapeOnly: i < 4 ? "" : "landscape_only"
          };
        }
        return weeks;
      };

      ProjectView.prototype.render = function() {
        var i, length, _i, _j;
        Util.debug("render ProjectView");
        this.$el.html(this.template({
          items: this.projects[this.currentIndex].toJSON(),
          weeks: this._getWeeksFromNow(),
          title: this.projectTitle
        }));
        this._calculateColWidth();
        $("#window_width").append("<p>" + window.innerWidth + "</p>");
        length = this.projects[this.currentIndex].toJSON().length;
        for (i = _i = 1; 1 <= length ? _i < length : _i > length; i = 1 <= length ? ++_i : --_i) {
          this.$el.find("#category" + i).hide();
        }
        this.currentWeek = 0;
        for (i = _j = 0; _j < 8; i = ++_j) {
          this.$el.find("#week" + i).hide();
        }
        return this.$el.find("#week" + this.currentWeek).show();
      };

      ProjectView.prototype._calculateColWidth = function() {
        if (window.orientation === 90 || window.orientation === -90) {
          return this.$el.find("table").addClass("landscape");
        } else {
          return this.$el.find("table").removeClass("landscape");
        }
      };

      ProjectView.prototype.tabSelected = function(event) {
        var i, length, value, _i, _results;
        value = event.target.value;
        length = this.projects[this.currentIndex].toJSON().length;
        this.currentCategory = value;
        this.currentWeek = 0;
        this.$el.find("#week" + this.currentWeek).show();
        _results = [];
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          if (i === Number(value)) {
            _results.push(this.$el.find("#category" + value).show());
          } else {
            _results.push(this.$el.find("#category" + i).hide());
          }
        }
        return _results;
      };

      ProjectView.prototype.updateProjectView = function(index) {
        this.currentIndex = index;
        this.projectTitle = this.options.items[index].title.$t;
        return this.render();
      };

      ProjectView.prototype.previousWeekSelected = function() {
        this.$el.find("#week" + (this.currentWeek - 1)).show();
        this.$el.find("#week" + this.currentWeek).hide();
        this.currentWeek = this.currentWeek - 1;
        return console.log("previous week" + this.currentWeek);
      };

      ProjectView.prototype.nextWeekSelected = function() {
        console.log("#week" + (this.currentWeek + 1));
        console.log(this.$el.find("#week" + (this.currentWeek + 1)));
        this.$el.find("#week" + (this.currentWeek + 1)).show();
        this.$el.find("#week" + this.currentWeek).hide();
        this.currentWeek = this.currentWeek + 1;
        return console.log("next week" + this.currentWeek);
      };

      return ProjectView;

    })(Backbone.View);
    return ProjectView;
  });

}).call(this);
