// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'util/util', 'model/user', 'model/loading', 'model/location', 'model/location_collection', 'view/location_view', 'view/interests_view', 'view/navbar_view', 'view/interest_matcher', 'view/loading_view', 'text!template/brown_bag.html', 'view/tab_controller'], function(_, Backbone, Util, User, Loading, Location, LocationCollection, LocationView, InterestsView, NavbarView, InterestMatcher, LoadingView, BrownBagTemplate, TabController) {
    var BrownBagView;
    return BrownBagView = (function(_super) {

      __extends(BrownBagView, _super);

      function BrownBagView() {
        return BrownBagView.__super__.constructor.apply(this, arguments);
      }

      BrownBagView.prototype.el = "#main";

      BrownBagView.prototype.template = _.template(BrownBagTemplate);

      BrownBagView.prototype.initialize = function() {
        var body, navbarView;
        this.selected = "t0";
        _.bindAll(this);
        this.number = 1;
        this.bindEvents();
        this._preRender();
        this.user = new User;
        this.user.on("change:userName", this.userDataReady);
        body = document.getElementById("body");
        body.className = "3";
        console.log(body);
        return navbarView = new NavbarView({
          model: this.user
        });
      };

      BrownBagView.prototype.bindEvents = function() {
        var eventName, events, i, id, _i, _j;
        this.$el.undelegate("#interest");
        this.$el.undelegate("#match");
        for (i = _i = 0; _i < 4; i = ++_i) {
          this.$el.undelegate("tab_default" + i);
        }
        eventName = 'createTouch' in document ? 'tap' : 'click';
        events = {};
        events["change #interest"] = "set";
        events["" + eventName + " #match"] = "callInterestMatcher";
        for (i = _j = 0; _j < 4; i = ++_j) {
          id = "#t" + i;
          events["" + eventName + " " + id] = "tabSelected";
        }
        return this.delegateEvents(events);
      };

      BrownBagView.prototype._preRender = function() {
        this.loadingView = new LoadingView({
          model: new Loading({
            "message": "rendering brown bag"
          })
        });
        return this.loadingView.render();
      };

      BrownBagView.prototype.userDataReady = function() {
        this.loadingView.empty();
        this.location = new Location;
        this.location.set("id", this.user.get("email"));
        this.locationPromise = this.location.fetch();
        return this.locationPromise.done(this.render);
      };

      BrownBagView.prototype.render = function() {
        console.log(this.location.get("interest"));
        console.log(this.location.get("email"));
        console.log(this.location.get("is_admin"));
        this.$el.html(this.template(this.location.toJSON()));
        this.renderLocationList();
        if ((this.location.get("is_admin")) === "1") {
          this.renderMatch();
        }
        return this.createTabs();
      };

      BrownBagView.prototype.renderLocationList = function() {
        var interestsView;
        this.interestCollection = new LocationCollection;
        return interestsView = new InterestsView({
          model: this.interestCollection
        });
      };

      BrownBagView.prototype.renderMatch = function() {
        console.log("fadsf");
        return $("#button").append("<button id=\"match\"> match </button>");
      };

      BrownBagView.prototype.set = function(event) {
        var interestName;
        this.$("#changed").text("changed!");
        interestName = $(event.target).val();
        console.log(interestName);
        this.location.set({
          interest: interestName,
          last_modify: Date.now()
        });
        this.location.save();
        return this.$("#changed").text(interestName);
      };

      BrownBagView.prototype.callInterestMatcher = function() {
        var interest_matcher;
        return interest_matcher = new InterestMatcher({
          model: this.interestCollection
        });
      };

      BrownBagView.prototype.createTabs = function() {
        var tab_controller;
        return tab_controller = new TabController({
          model: this.number
        });
      };

      BrownBagView.prototype.tabSelected = function() {
        var z, zIndex;
        if (!(event.target.id === this.selected || event.target.className === "x_icon" || event.target.className === "tab_default_x")) {
          event.target.className = "tab_bar_selected";
          z = 101;
          document.getElementById(event.target.id).style.zIndex = z.toString();
          zIndex = 100 - this.selected[1] - 1;
          document.getElementById(this.selected).style.zIndex = zIndex.toString();
          if (this.selected === "t0") {
            document.getElementById(this.selected).className = "tab_bar_first";
          } else {
            document.getElementById(this.selected).className = "tab_default";
          }
          return this.selected = event.target.id;
        }
      };

      return BrownBagView;

    })(Backbone.View);
  });

}).call(this);
