// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'util/util', 'model/user', 'model/loading', 'view/navbar_view', 'view/loading_view', 'text!template/settings.html', 'view/tab_controller'], function(_, Backbone, Util, User, Loading, NavbarView, LoadingView, SettingsTemplate, TabController) {
    var SettingsView;
    SettingsView = (function(_super) {

      __extends(SettingsView, _super);

      function SettingsView() {
        return SettingsView.__super__.constructor.apply(this, arguments);
      }

      SettingsView.prototype.el = "#main";

      SettingsView.prototype.template = _.template(SettingsTemplate);

      SettingsView.prototype.initialize = function() {
        var navbarView;
        this.number = 4;
        this.selected = "t0";
        _.bindAll(this);
        this._preRender();
        this.bindEvents();
        this.user = new User;
        this.user.on("change:userName", this.userDataReady);
        return navbarView = new NavbarView({
          model: this.user
        });
      };

      SettingsView.prototype.bindEvents = function() {
        var eventName, events, i, id, _i, _j, _ref, _ref1;
        for (i = _i = 0, _ref = this.number; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.$el.undelegate("tab_default" + i);
        }
        eventName = 'createTouch' in document ? 'tap' : 'click';
        events = {};
        for (i = _j = 0, _ref1 = this.number; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          id = "#t" + i;
          events["" + eventName + " " + id] = "tabSelected";
        }
        return this.delegateEvents(events);
      };

      SettingsView.prototype._preRender = function() {
        this.loadingView = new LoadingView({
          model: new Loading({
            "message": "rendering settings page"
          })
        });
        return this.loadingView.render();
      };

      SettingsView.prototype.userDataReady = function() {
        this.loadingView.empty();
        return this.render();
      };

      SettingsView.prototype.render = function() {
        this.$el.html(this.template(""));
        return this.createTabs();
      };

      SettingsView.prototype.createTabs = function() {
        var tab_controller;
        return tab_controller = new TabController({
          model: this.number
        });
      };

      SettingsView.prototype.tabSelected = function() {
        var z, zIndex;
        if (event.target.id !== this.selected) {
          event.target.className = "tab_bar_selected";
          z = 101;
          document.getElementById(event.target.id).style.zIndex = z.toString();
          zIndex = 100 - this.selected[1] - 1;
          document.getElementById(this.selected).style.zIndex = zIndex.toString();
          if (this.selected === "t0") {
            document.getElementById(this.selected).className = "tab_bar_first";
          } else {
            document.getElementById(this.selected).className = "tab_default";
          }
          return this.selected = event.target.id;
        }
      };

      return SettingsView;

    })(Backbone.View);
    return SettingsView;
  });

}).call(this);
