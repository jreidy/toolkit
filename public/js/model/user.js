// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'zepto', 'util/util', 'model/gauth'], function(_, Backbone, $, Util, GAuth) {
    var User;
    User = (function(_super) {
      var access_token, auth, location;

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      auth = null;

      location = null;

      access_token = null;

      User.prototype.url = function() {
        return "https://www.googleapis.com/oauth2/v2/userinfo?access_token=" + access_token;
      };

      User.prototype.initialize = function() {
        _.bindAll(this);
        this.id = "local_user";
        this.localStorage = new Backbone.LocalStorage(this.id);
        this.on("destroy", this.userDestroyed);
        auth = new GAuth;
        return auth.on("change:access_token", this.authAccessTokenChanged);
      };

      User.prototype.userDestroyed = function() {
        return auth.destroy();
      };

      User.prototype.authAccessTokenChanged = function() {
        var _ref,
          _this = this;
        access_token = auth.get('access_token');
        this.fetch();
        if (!(((_ref = this.get('userName')) != null ? _ref.length : void 0) > 0)) {
          return this.load().always(function(model) {
            var match, _ref1;
            if ((model != null) && ((_ref1 = model["email"]) != null ? _ref1.length : void 0)) {
              match = /(.*)@/.exec(model["email"]);
              if (match) {
                model["userName"] = match[1];
              }
              model["uid"] = model["id"];
              model["id"] = _this.id;
              _this.set(model);
              return _this.save();
            } else {
              return _this.trigger("fetch:error");
            }
          });
        }
      };

      User.prototype.load = function() {
        return $.ajax({
          dataType: "jsonp",
          url: this.url()
        });
      };

      User.prototype.authorized = function() {
        auth.fetch();
        return auth.authorized();
      };

      User.prototype.getAuthUrl = function() {
        return auth.getAuthUrl();
      };

      User.prototype.getAccessToken = function() {
        return auth.get('access_token');
      };

      User.prototype.isGreeAccount = function() {
        return this.get('email').indexOf("@gree.co.jp") > 0;
      };

      return User;

    })(Backbone.Model);
    return User;
  });

}).call(this);
