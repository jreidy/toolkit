// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'util/util'], function(_, Backbone, Util) {
    var GAuth;
    GAuth = (function(_super) {

      __extends(GAuth, _super);

      function GAuth() {
        return GAuth.__super__.constructor.apply(this, arguments);
      }

      GAuth.prototype.redirect_uri = "" + Util.loc.protocol + "//" + Util.loc.host;

      GAuth.prototype.client_id = "732956213095-5hur970asb127rfk0dqbk9e8sa43nh4v.apps.googleusercontent.com";

      GAuth.prototype.response_type = "token";

      GAuth.prototype.scope = "https://spreadsheets.google.com/feeds/+https://docs.google.com/feeds/+https://www.googleapis.com/auth/userinfo.profile+https://www.googleapis.com/auth/userinfo.email";

      GAuth.prototype.base_url = "https://accounts.google.com/o/oauth2/auth";

      GAuth.prototype.initialize = function() {
        this.id = "local_auth";
        return this.localStorage = new Backbone.LocalStorage(this.id);
      };

      GAuth.prototype.getAuthUrl = function() {
        var path, url;
        path = "response_type=" + this.response_type + "&client_id=" + this.client_id + "&redirect_uri=" + this.redirect_uri + "&scope=" + this.scope;
        return url = "" + this.base_url + "?" + path;
      };

      /*
          @param query
            access_token=ya29.AHES6ZSYbvbzbPOfc9p-Q8xtBTWiEuB9TpB-LmnJKXfPH6d2&token_type=Bearer&expires_in=3600
      */


      GAuth.prototype.parseAuthToken = function(query) {
        var pairs, params;
        pairs = query.split('&');
        params = {};
        _.each(pairs, function(pair) {
          var item;
          item = pair.split("=");
          return params[item[0]] = item[1];
        });
        params['expired_at'] = Date.now() + params['expires_in'] * 1000;
        this.set(params);
        return this.save();
      };

      GAuth.prototype._expired = function() {
        var expired_at, now;
        expired_at = this.get('expired_at');
        now = Date.now();
        if (expired_at) {
          return expired_at < now;
        } else {
          return true;
        }
      };

      GAuth.prototype.authorized = function() {
        return (this.get('access_token')) && (!this._expired());
      };

      return GAuth;

    })(Backbone.Model);
    return GAuth;
  });

}).call(this);
