// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', "util/util", "model/spreadsheet"], function(_, Backbone, Util, Spreadsheet) {
    /* 
    Read a Spreadsheet 
    sheet = new Spredsheet
      access_token: "ya29.AHES6ZTMXviGBfSy2nglOjfEuOFfggsS0gAh6BWNj5Yi9Q"
      id: "0Au6Uu7l2YC-TdGhWNVIxZ0JNY2psalo1NkRHTFRoWmc"
    */

    var SpreadsheetList;
    SpreadsheetList = (function(_super) {

      __extends(SpreadsheetList, _super);

      function SpreadsheetList() {
        return SpreadsheetList.__super__.constructor.apply(this, arguments);
      }

      SpreadsheetList.prototype.id = "0B0S9wwNRj-wtZFdjcVhDTTBVcGM";

      SpreadsheetList.prototype.model = Spreadsheet;

      SpreadsheetList.prototype.url = function() {
        return "https://docs.google.com/feeds/default/private/full/" + this.id + "/contents?v=3&alt=json-in-script&access_token=" + this.access_token;
      };

      SpreadsheetList.prototype.parse = function(response) {
        /*
              backbone will merge duplicated model if they have same id. since value of id property is an object in google response data. we just reset id with a real string value to solve this issue 
              we also filter non-spreadsheet files from document list
        */

        var items;
        Util.debug("spreadsheets response: ", response);
        items = response.feed.entry;
        return _.filter(items, function(item) {
          var resourceId;
          item.id = item.id.$t;
          resourceId = item.gd$resourceId.$t.split(":");
          item.gd$resourceId.$t = resourceId[1];
          item.updatedDate = item.updated.$t.substring(0, 10);
          return resourceId[0] === "spreadsheet";
        });
      };

      return SpreadsheetList;

    })(Backbone.Collection);
    return SpreadsheetList;
  });

}).call(this);
