// Generated by CoffeeScript 1.3.3
(function() {
  var Location, MongoStore, SqliteStore, app, express, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  util = require('util');

  SqliteStore = (function() {

    function SqliteStore(filename, initDone) {
      var sqlite3;
      if (filename == null) {
        filename = "gree.sqlite3";
      }
      this.initDone = initDone;
      this.createTables = __bind(this.createTables, this);

      sqlite3 = require('sqlite3');
      console.log("new SQLite3 Store");
      this.db = new sqlite3.Database(filename, this.createTables);
    }

    SqliteStore.prototype.createTables = function() {
      var _this = this;
      console.log("create table");
      return this.db.run("CREATE TABLE IF NOT EXISTS location (email TEXT PRIMARY KEY, home TEXT, current TEXT, last_modify TEXT, status TEXT, interest TEXT, has_match TEXT, is_admin TEXT)", function() {
        return typeof _this.initDone === "function" ? _this.initDone() : void 0;
      });
    };

    SqliteStore.prototype.update = function(email, home, current, last_modify, status, interest, has_match, is_admin, callback) {
      var sql;
      sql = 'UPDATE location SET current=$current, home=$home, last_modify=$last_modify, status=$status, interest=$interest, has_match=$has_match, is_admin=$is_admin WHERE email=$email';
      return this.db.run(sql, {
        $current: current,
        $home: home,
        $last_modify: last_modify,
        $email: email,
        $status: status,
        $interest: interest,
        $has_match: has_match,
        $is_admin: is_admin
      }, callback);
    };

    SqliteStore.prototype.select = function(sql, callback) {
      return this.db.all(sql, callback);
    };

    SqliteStore.prototype.get = function(sql, param, callback) {
      return this.db.get(sql, param, callback);
    };

    SqliteStore.prototype.insert = function(sql, param, callback) {
      return this.db.run(sql, param, callback);
    };

    SqliteStore.prototype.selectAll = function(callback) {
      var sql;
      sql = 'SELECT email, home, current, last_modify, status, interest, has_match, is_admin FROM location';
      return this.select(sql, callback);
    };

    SqliteStore.prototype.getByEmail = function(email, callback) {
      var sql;
      sql = "SELECT email, home, current, last_modify, status, interest, has_match, is_admin FROM location WHERE email=$email";
      return this.get(sql, {
        $email: email
      }, callback);
    };

    SqliteStore.prototype.create = function(email, home, current, last_modify, status, interest, has_match, is_admin, callback) {
      var sql;
      sql = "INSERT INTO location VALUES ($email, $home, $current, $last_modify, $status, $interest, $has_match, $is_admin)";
      return this.insert(sql, {
        $email: email,
        $home: home,
        $current: current,
        $last_modify: last_modify,
        $status: status,
        $interest: interest,
        $has_match: has_match,
        $is_admin: is_admin
      }, callback);
    };

    return SqliteStore;

  })();

  MongoStore = (function() {

    function MongoStore(initDone) {
      var mongoose,
        _this = this;
      this.initDone = initDone;
      mongoose = require('mongoose');
      console.log("new Mongo Store");
      mongoose.connect("mongodb://nodejitsu:718de49e0dfbb48ef7b0870c5317edfe@alex.mongohq.com:10061/nodejitsudb915284794144");
      mongoose.connection.on("open", function() {
        console.log("Connect Mongo success");
        if (typeof _this.initDone === "function") {
          _this.initDone();
        }
        return _this.Loc = mongoose.model("Location", new mongoose.Schema({
          email: String,
          home: String,
          current: String,
          last_modify: String,
          status: String,
          interest: String,
          has_match: String,
          is_admin: String
        }));
      });
    }

    MongoStore.prototype.update = function(email, home, current, last_modify, status, interest, has_match, is_admin, callback) {
      return this.getByEmail(email, function(err, loc) {
        if (!err) {
          loc.email = email;
          loc.home = home;
          loc.current = current;
          loc.last_modify = last_modify;
          loc.status = status;
          loc.interest = interest;
          loc.has_match = has_match;
          loc.is_admin = is_admin;
          return loc.save(function(err) {
            if (!err) {
              return callback();
            }
          });
        }
      });
    };

    MongoStore.prototype.selectAll = function(callback) {
      return this.Loc.find(function(err, todos) {
        return callback(err, todos);
      });
    };

    MongoStore.prototype.getByEmail = function(email, callback) {
      return this.Loc.findOne({
        email: email
      }, function(err, loc) {
        return callback(err, loc);
      });
    };

    MongoStore.prototype.create = function(email, home, current, last_modify, status, interest, has_match, is_admin, callback) {
      var loc;
      loc = new this.Loc({
        email: email,
        home: home,
        current: current,
        last_modify: last_modify,
        status: status,
        interest: interest,
        has_match: has_match,
        is_admin: is_admin
      });
      return loc.save(function(err) {
        if (!err) {
          return callback();
        }
      });
    };

    return MongoStore;

  })();

  Location = (function() {

    Location.store = null;

    Location.setDB = function(store) {
      console.log("Location.setDB");
      return Location.store = store;
    };

    function Location(email, home, current, last_modify, status, interest, has_match, is_admin) {
      this.email = email;
      this.home = home;
      this.current = current;
      this.last_modify = last_modify;
      this.status = status;
      this.interest = interest;
      this.has_match = has_match;
      this.is_admin = is_admin;
      this.email = this.normalize(this.email);
      this.home = this.normalize(this.home);
      this.current = this.normalize(this.current);
      this.last_modify = this.normalize(this.last_modify);
      this.status = this.normalize(this.status);
      this.interest = this.normalize(this.interest);
      this.has_match = this.normalize(this.has_match);
      this.is_admin = this.normalize(this.is_admin);
    }

    Location.prototype.normalize = function(item) {
      if (item && item !== "undefined") {
        return item;
      } else {
        return "";
      }
    };

    Location.all = function(callback, error_callback) {
      return Location.store.selectAll(Location.allCallback(callback, error_callback));
    };

    Location.loadFromStoreRow = function(row) {
      var l;
      l = new Location(row.email, row.home, row.current, row.last_modify, row.status, row.interest, row.has_match, row.is_admin);
      return l.json();
    };

    Location.prototype.json = function() {
      return {
        email: this.email,
        home: this.home,
        current: this.current,
        last_modify: this.last_modify,
        status: this.status,
        interest: this.interest,
        has_match: this.has_match,
        is_admin: this.is_admin
      };
    };

    Location.allCallback = function(callback, error_callback) {
      return function(err, rows) {
        var row;
        if (!err) {
          return callback((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = rows.length; _i < _len; _i++) {
              row = rows[_i];
              _results.push(Location.loadFromStoreRow(row));
            }
            return _results;
          })());
        } else {
          return error_callback(err);
        }
      };
    };

    Location.prototype.save = function(callback) {
      var self;
      self = this;
      return Location.getByEmail(this.email, function(err, location) {
        if ((err != null ? err.message : void 0) === "no match location") {
          return Location.create(self.email, self.home, self.current, self.last_modify, self.status, self.interest, self.has_match, self.is_admin, callback);
        } else {
          console.log("update");
          if (!self.home) {
            self.home = location.home;
          }
          if (!self.current) {
            self.current = location.current;
          }
          if (!self.last_modify) {
            self.last_modify = location.last_modify;
          }
          if (!self.status) {
            self.status = location.status;
          }
          if (!self.interest) {
            self.interest = location.interest;
          }
          if (!self.has_match) {
            self.has_match = location.has_match;
          }
          if (!self.is_admin) {
            self.is_admin = location.is_admin;
          }
          return Location.store.update(self.email, self.home, self.current, self.last_modify, self.status, self.interest, self.has_match, self.is_admin, callback);
        }
      });
    };

    Location.getByEmail = function(email, callback) {
      return Location.store.getByEmail(email, function(err, row) {
        if (!err) {
          if (row) {
            return callback(err, Location.loadFromStoreRow(row));
          } else {
            return callback({
              message: 'no match location'
            });
          }
        } else {
          return callback(err);
        }
      });
    };

    Location.create = function(email, home, current, last_modify, status, interest, has_match, is_admin, callback) {
      return Location.store.create(email, home, current, last_modify, status, interest, has_match, is_admin, callback);
    };

    return Location;

  })();

  app = express.createServer();

  app.use(express.bodyParser());

  app.all('*', function(req, res, next) {
    res.header('Access-Control-Allow-Origin', req.headers.origin);
    res.header('Access-Control-Allow-Credentials', true);
    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');
    return next();
  });

  app.setupRoutes = function(app) {
    app.put("/locations/:id", function(req, res) {
      var current, email, has_match, home, interest, is_admin, last_modify, loc, status, _ref;
      console.log("change " + req.params.id + " location");
      email = req.params.id;
      _ref = req.body, current = _ref.current, last_modify = _ref.last_modify, home = _ref.home, status = _ref.status, interest = _ref.interest, has_match = _ref.has_match, is_admin = _ref.is_admin;
      loc = new Location(email, home, current, last_modify, status, interest, has_match, is_admin);
      return loc.save(function() {
        return Location.getByEmail(email, function(err, location) {
          return res.json(location);
        });
      });
    });
    app.get("/locations/:id", function(req, res) {
      var email;
      console.log("get " + req.params.id + " location");
      email = req.params.id;
      return Location.getByEmail(email, function(err, location) {
        console.log(err);
        console.log(location);
        return res.json(location);
      });
    });
    return app.get("/locations", function(req, res) {
      var success;
      success = function(locations) {
        return res.json(locations);
      };
      return Location.all(success);
    });
  };

  app.Models = {
    Location: Location
  };

  app.setDB = function(store) {
    var model, modelName, _ref, _results;
    _ref = app.Models;
    _results = [];
    for (modelName in _ref) {
      model = _ref[modelName];
      _results.push(model.setDB(store));
    }
    return _results;
  };

  app.start = function(path, port, useMongo) {
    if (path == null) {
      path = __dirname + '/../public';
    }
    if (port == null) {
      port = process.env.PORT || 3000;
    }
    console.log("server path: " + path + ", server port: " + port + ", using Mongo: " + useMongo);
    app.use(express["static"](path));
    app.port = port;
    app.listen(port);
    if (useMongo) {
      console.log("using Mongo");
      app.store = new MongoStore;
    } else {
      app.store = new SqliteStore;
    }
    app.setDB(app.store);
    return app.setupRoutes(app);
  };

  module.exports = {
    app: app,
    SqliteStore: SqliteStore
  };

}).call(this);
