// Generated by CoffeeScript 1.3.3
(function() {
  var Location, SqliteStore, app, should, spawn, util, _ref;

  spawn = require('child_process').spawn;

  should = require('should');

  util = require('util');

  _ref = require('../lib/server'), app = _ref.app, SqliteStore = _ref.SqliteStore;

  Location = app.Models.Location;

  describe('Location', function() {
    var store;
    store = null;
    return describe('get', function() {
      beforeEach(function(done) {
        store = new SqliteStore(":memory:", done);
        return app.setDB(store);
      });
      it('should return err when there is no location record match that email', function(done) {
        var callback;
        callback = function(err, location) {
          err.message.should.equal("no match location");
          should.strictEqual(void 0, location);
          return done();
        };
        return Location.getByEmail('not.exist@gree.co.jp', callback);
      });
      it("should able to store after create", function(done) {
        var success;
        Location.create("xingkui.wang@gree.co.jp", "China, Beijing", "", "1336030510637", "");
        success = function(locations) {
          locations.should.have.length(1);
          return done();
        };
        return Location.all(success);
      });
      it('should able to fetch a location after create', function(done) {
        var callback;
        Location.create("xingkui.wang@gree.co.jp", "China, Beijing", "", "1336030510637", "");
        callback = function(err, location) {
          location.email.should.equal('xingkui.wang@gree.co.jp');
          return done();
        };
        return Location.getByEmail('xingkui.wang@gree.co.jp', callback);
      });
      it("should able to create a location when save it but there is no record in db previously", function(done) {
        var location;
        location = new Location('xingkui.wang@gree.co.jp', "", "China, Beijing", "1336030510637", "");
        return location.save(function() {
          var callback;
          callback = function(err, location) {
            location.email.should.equal('xingkui.wang@gree.co.jp');
            location.current.should.equal('China, Beijing');
            location.home.should.equal('');
            return done();
          };
          return Location.getByEmail('xingkui.wang@gree.co.jp', callback);
        });
      });
      it("should able to update a location when it's already exist", function(done) {
        return Location.create("xingkui.wang@gree.co.jp", "", "China, Beijing", "1336030510637", "", function() {
          var location;
          location = new Location('xingkui.wang@gree.co.jp', "", "Japan, Tokyo", "1336030510637", "");
          return location.save(function() {
            var callback;
            callback = function(err, location) {
              location.email.should.equal('xingkui.wang@gree.co.jp');
              location.current.should.equal('Japan, Tokyo');
              location.home.should.equal('');
              return done();
            };
            return Location.getByEmail('xingkui.wang@gree.co.jp', callback);
          });
        });
      });
      return it("should able to update travel status", function(done) {
        return Location.create("xingkui.wang@gree.co.jp", "", "China, Beijing", "1336030510637", "", function() {
          var location;
          location = new Location('xingkui.wang@gree.co.jp', "", "Japan, Tokyo", "1336030510637", "traveling");
          return location.save(function() {
            var callback;
            callback = function(err, location) {
              location.email.should.equal('xingkui.wang@gree.co.jp');
              location.current.should.equal('Japan, Tokyo');
              location.home.should.equal('');
              location.status.should.equal('traveling');
              return done();
            };
            return Location.getByEmail('xingkui.wang@gree.co.jp', callback);
          });
        });
      });
    });
  });

}).call(this);
